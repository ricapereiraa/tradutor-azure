# -*- coding: utf-8 -*-
"""translator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KaH_-HfD4Ctbk7fux96Xrq2VgQAnS0O3
"""

import requests
from docx import Document
import os
subscription_key = os.getenv("AZURE_TRANSLATOR_KEY")
endpoint = 'https://api.cognitive.microsofttranslator.com'
location = "eastus2"
language_destination = 'pt-br'

def translator_text(text, target_language):
    path = '/translate'
    constructed_url = endpoint + path
    headers = {
        'Ocp-Apim-Subscription-Key': subscription_key,
        'Ocp-Apim-Subscription-Region': location,
        'Content-type': 'application/json',
        'X-ClientTraceId': str(os.urandom(16))
    }

    body = [{
        'text': text
    }]
    params = {
        'api-version': '3.0',
        'from': 'en',
        'to': target_language

    }
    request = requests.post(constructed_url, params=params, headers=headers, json=body)
    response = request.json()

    if isinstance(response, list) and len(response) > 0 and "translations" in response[0] and len(response[0]["translations"]) > 0 and "text" in response[0]["translations"][0]:
        return response[0]["translations"][0]["text"]
    else:
        print(f"Error: Unexpected response format: {response}")
        return None

translator_text("I know you're somewhere out there, somewhere far away", language_destination)

def translate_document(path):
    document = Document(path)
    full_text = []
    for paragraph in document.paragraphs:
        translateed_text = translator_text(paragraph.text, language_destination)
        full_text.append(translateed_text)

    translate_doc = Document()
    for line in full_text:
        translate_doc.add_paragraph(line)
    path_translated = path.replace(".docx", f"_{language_destination}.docx")
    translate_doc.save(path_translated)
    return path_translated

input_file = r"C:\Users\ricpe\Desktop\tradutor\Document.docx"
translate_document(input_file)

import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
    response = requests.get(url)

    if response.status_code == 200:
      soup = BeautifulSoup(response.text, 'html.parser')
      for script_or_style in soup(["script", "style"]):
        script_or_style.decompose()
      text = soup.get_text(separator=' ')
      #Limpar texto
      lines = (line.strip() for line in text.splitlines())
      chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
      clean_text = '\n'.join(chunk for chunk in chunks if chunk)
      return clean_text
    else:
      print(f"Failed to fetch the URL. Status code: {response.status_code}")
      return None

    text = soup.get_text()
    return text

extract_text_from_url("https://dev.to/getvm/distributed-systems-mastering-the-art-of-complex-computing-networks-31pc")

from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI(
    azure_endpoint= "https://ricpereira163-8902-resource.services.ai.azure.com/api/projects/ricpereira163-8902",
    api_key= os.getenv("AZURE_OPENAI_API_KEY"),
    api_version= "2024-02-15-preview",
    deployment_name= "gpt-4o-mini",
    max_retries= 0
)

def translate_article(text, lang):
  messages = [
      ("system", "VocÃª atua como tradutor de textos"),
      ("user", f"Traduza o {text} para o idioma {lang} e responda em markdown")
  ]

  response = client.invoke(messages)
  print(response.content)
  return response.content

translate_article("Students learn critical techniques", "portugues")

url = "https://dev.to/kenakamu/azure-open-ai-in-vnet-3alo"
text = extract_text_from_url(url)
article = translate_article(text, "portugues")

print(article)